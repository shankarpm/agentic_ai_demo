import os
from typing import List, Dict, Any
from jinja2 import Template
from openai import OpenAI

SUMMARY_TMPL = Template("""
# Investment Brief: {{ investor_name }}

**Preferences:** {{ preferences_summary }}

## Top Properties
{% for p in props %}
**{{ loop.index }}. {{ p.address }}, {{ p.city }}, {{ p.state }}**
- Price: ${{ "{:,.0f}".format(p.price) }} | Beds/Baths: {{ p.beds }}/{{ p.baths }} | Sqft: {{ p.sqft }}
- CAP: {{ "{:.2%}".format(p.cap_rate) }} | NOI: ${{ "{:,.0f}".format(p.noi_annual) }} | CoC ROI: {{ "{:.2%}".format(p.roi_cash_on_cash) }}
- AVM: ${{ "{:,.0f}".format(p.avm_price) }} | Score: {{ "{:.3f}".format(p.score) }}

{% endfor %}
*Generated by Agentic-REI. For internal use only.*
""".strip())

class ReportAgent:
    def __init__(self):
        self.client = None
        key = os.getenv("OPENAI_API_KEY")
        if key:
            self.client = OpenAI(api_key=key)
        self.model = os.getenv("OPENAI_MODEL", "gpt-4o-mini")

    def generate(self, investor_name: str, preferences_summary: str, props: List[Dict[str, Any]]) -> str:
        # Deterministic template baseline
        baseline = SUMMARY_TMPL.render(
            investor_name=investor_name,
            preferences_summary=preferences_summary or "N/A",
            props=props
        )
        # If LLM available, produce a refined narrative
        if self.client:
            prompt = (
                "Rewrite the following investment brief into a polished, executive summary "
                "with clear bullet points, risks, and suggested next steps. Preserve all numbers.\n\n"
                f"{baseline}"
            )
            try:
                chat = self.client.chat.completions.create(
                    model=self.model,
                    messages=[{"role": "user", "content": prompt}],
                    temperature=0.2,
                )
                return chat.choices[0].message.content
            except Exception:
                return baseline
        return baseline
